/* Reset */
body.night-mode {
    background-color: #1e1e1e;
}

body {
    background-color: #f5f5f5;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    transition: background-color 0.3s ease;
}

/* Sem lugar definido */
.alert {
    
}
.hide {
    display: none;
}
.list-group {
    min-height: 10vh;
}

.list-group h3 {
    color: #555555;
}

/* Modo noite */
.night-mode h1 {
    color: #eeeeee;
}

.night-mode .list-group h3 {
    color: #bbbbbb;
}

.night-mode .todo {
    background-color: #FFF ;
}

.night-mode .todo h3 {
    color: #444444;
}

.night-mode .finished {
    background-color: #333;
}

.night-mode footer {
    background-color: #333333;
}

.night-mode .empty_tasks h5 {
    color: #eeeeee;
}

.night-mode .footer-content i, .night-mode .footer-bottom {
    color: #FFF;
}

.night-mode .edit-form p {
    color: #eeeeee;
}

/* .night-mode .btn {
    background-color: #6c757d;
    border: #6c757d;
} */

.ball {
    width: 25px;
    height: 25px;
    /* background-color: #FFF; */
    border-radius: 60%;
    position: absolute;
    left: 0;
    top: 1px;
    transition: left 0.3s ease;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
}

.toggle {
    background: #e0e0e0;
    width: 60px;
    height: 27px;
    border-radius: 10rem;
    position: relative;
    cursor: pointer;
    display: flex;
    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
    position: absolute;
    top: 20px;
    right: 20px;
}

.toggle.active {
    background: #3f3f3f;
}

.toggle .ball {
    display: flex;
    justify-content: center;
    align-items: center;
}
.toggle.active .ball {
    left: 33px;
    /* background-color: yellow; */
}

/* Editar tarefa */
.edit-form {
    border-top: 1px solid rgba(0, 0, 0, 0.1);
}


/*GPT: o item dentro do contêiner flexível irá ocupar todo o espaço disponível dentro do contêinerr  */
/*Matheus Battisti: Crescer até o fim da área que tenho disponível */
.container {
    flex: 1;
}

/* Cabeçalho e rodapé */

footer {
    background-color: #e0e0e0;
}

.footer-content {
    display: flex;
    gap: 1rem;
}

.footer-content i {
    color: #333333;
    font-size: 2rem;
}

.footer_link {
    text-decoration: none;
    color: #1B98E0;
}

.footer-bottom {
    border-top: 1px solid rgba(17, 0, 255, 0.1);
    color: #333333;
    font-weight: 300;
    width: 35%;
}

/* Imagem e texto de quando não tem tarefas adicionadas */
.empty_tasks {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 50vh;
}

.empty_tasks h5 {
    font-weight: 500;
}

.empty_tasks img {
    width: 25em;
}

/* Classe 'todo' contém o elemento 'li', pai da tarefa */
.todo {
    color: #333;
    display: flex;
    justify-content: space-between;
}

.todo h3 {
    margin: 0;
    padding: 0.25rem 1rem 0.25rem;
    font-size: 1rem;
    /* O flex: 1 no <h3> faz com que ele cresça automaticamente para ocupar todo o espaço livre entre o início da linha e os botões no final. Ele "empurra" os botões para a direita, ocupando todo o espaço disponível entre eles.  */
    flex: 1;
}

.todo button {
    margin-left: 0.2rem;
}

.finished {
    background-color: #333;
}

.finished h3 {
    color: #FFF;
    text-decoration: line-through;
    font-style: italic;
}

/* transition e transform devem ser utilizadas em conjunto */
/* transition = determina a propriedade que vai ser afetada, duração da transicao, comportamento do movimento e ponto do inicio */
/* transform = aponta que transformacao sera executada e os valores */
/* transform-origin -> altera o eixo de referencia do obj, por padrão é center */
/* justify-content alinha os itens na horizontal */
/* align-items alinha os itens na vertical */
/* flex-direction define a direção em que os itens sao posicionados no container */
/* transition é no elemento */
/* propriedade + tempo que vai ocorrer essa transição + tipo de transição [liner, ease, ease-in-out] + quantas vezes vai se repetir[infinite] */
/* elemento pai = perspective -> define a profundidade do mundo 3d */
/* elemento filho = transform-style: preserve-3d -> permite que os filhos do elemento mantenham a perspectiva 3d*/

/* Animações */
@keyframes openEditTaskCard {
    0% {
        transform: rotateY(90deg);
    }
    50% {
        transform: rotateY(45deg);
    }
    100% {
        transform: rotateY(0);
    }
}

@keyframes closeEditTaskCard {
    0% {
        transform: rotateY(0);
    }
    100% {
        transform: rotateY(90deg);
    }
}

.container-3d {
    perspective: 2000px;
}

.card {
    transform-style: preserve-3d;
}

/* Teste de novo switch mode */
/* #teste {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #e0e0e0;
    border: 1px solid #bbbbbb;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    box-shadow: 2.5px 2.5px 5px rgba(0, 0, 0, 0.2);
}

#teste i {
    font-size: 24px;
    color: blue;
}

#teste i:last-child {
    display: none;
}

.night-mode #teste i:first-child {
    display: none;
}

.night-mode #teste i:last-child {
    display: block;
}

.night-mode #teste {
    background-color: #e0e0e0;
} */



@keyframes error {
    0% {
        border-color: transparent;
        background-color: transparent;
    }
    50% {
        background-color: #0d6efd;
    }
    100% {
        border-color: transparent;
        background-color: transparent;
    }
}

.input-group button.error {
    animation: error 1s ease;
    box-sizing: border-box;
}

button:hover {
    background-color: #333;
}

button:hover > i {
    color: #FFF;
}

button i {
    font-weight: bold;
    /* Usuário clica no botão e não no ícone */
    pointer-events: none;
}
@media only screen and (max-width: 700px){
    .footer-content {
        display: none;
    }
    .footer-bottom {
        width: 100%;
    }
}
/* Responsividade com outros dispositivos */
/* @media only screen and (max-width: 712px) {
    classe {
        codigo de implementação
    }
} */